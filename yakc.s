; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
idleCount:
	DW	0
contextSwitchNum:
	DW	0
nestedDepth:
	DW	0
TCBArrayNum:
	DW	1
runSched:
	DB	0
	ALIGN	2
L_yakc_1:
	DW	0
	ALIGN	2
adjustPriority:
	; >>>>> Line:	19
	; >>>>> -; 
	jmp	L_yakc_2
L_yakc_3:
	; >>>>> Line:	21
	; >>>>> if (listNode == 0 || toAdd == 0) 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_5
	mov	ax, word [bp+6]
	test	ax, ax
	jne	L_yakc_4
L_yakc_5:
	; >>>>> Line:	22
	; >>>>> return; 
	jmp	L_yakc_6
L_yakc_4:
	; >>>>> Line:	24
	; >>>>> if (listNode->priority > toAdd->priority) { 
	mov	si, word [bp+4]
	add	si, 4
	mov	di, word [bp+6]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jge	L_yakc_7
	; >>>>> Line:	25
	; >>>>> toAdd->prevTCB = listNode->prevTCB; 
	mov	si, word [bp+4]
	add	si, 10
	mov	di, word [bp+6]
	add	di, 10
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	26
	; >>>>> toAdd->nextTCB = listNode; 
	mov	si, word [bp+6]
	add	si, 12
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	27
	; >>>>> listNode->prevTCB->nextTCB = toAdd; 
	mov	si, word [bp+4]
	add	si, 10
	mov	si, word [si]
	add	si, 12
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	28
	; >>>>> listNode->prevTCB = toAdd; 
	mov	si, word [bp+4]
	add	si, 10
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	30
	; >>>>> if (priorityDepth == 0) 
	mov	ax, word [L_yakc_1]
	test	ax, ax
	jne	L_yakc_8
	; >>>>> Line:	31
	; >>>>> *topOfList = toAdd; 
	mov	si, word [bp+8]
	mov	ax, word [bp+6]
	mov	word [si], ax
L_yakc_8:
	jmp	L_yakc_9
L_yakc_7:
	; >>>>> Line:	33
	; >>>>> priorityDepth++; 
	inc	word [L_yakc_1]
	; >>>>> Line:	34
	; >>>>> adjustPriority(listNode->nextTCB, toAdd, topOfList); 
	push	word [bp+8]
	push	word [bp+6]
	mov	si, word [bp+4]
	add	si, 12
	push	word [si]
	call	adjustPriority
	add	sp, 6
	; >>>>> Line:	35
	; >>>>> priorityDepth--; 
	dec	word [L_yakc_1]
L_yakc_9:
L_yakc_6:
	mov	sp, bp
	pop	bp
	ret
L_yakc_2:
	push	bp
	mov	bp, sp
	jmp	L_yakc_3
	ALIGN	2
YKInitialize:
	; >>>>> Line:	39
	; >>>>> void YKInitialize(){ 
	jmp	L_yakc_11
L_yakc_12:
	; >>>>> Line:	41
	; >>>>> YKTCBArray[0].priority = 2^15; 
	mov	word [(4+YKTCBArray)], 13
	; >>>>> Line:	42
	; >>>>> YKTCBArray[0].SPtr = (void *)idleTaskStack[256]; 
	mov	ax, word [(512+idleTaskStack)]
	mov	word [YKTCBArray], ax
	; >>>>> Line:	43
	; >>>>> YKTCBArray[0].state = ready_st; 
	mov	word [(8+YKTCBArray)], 0
	; >>>>> Line:	44
	; >>>>> YKTCBArray[0].tickDelay = 0; 
	mov	word [(6+YKTCBArray)], 0
	; >>>>> Line:	45
	; >>>>> readyTask = &YKTCBArray[0]; 
	mov	word [readyTask], YKTCBArray
	; >>>>> Line:	46
	; >>>>> YKReadyList = &YKTCBArray[0]; 
	mov	word [YKReadyList], YKTCBArray
	mov	sp, bp
	pop	bp
	ret
L_yakc_11:
	push	bp
	mov	bp, sp
	jmp	L_yakc_12
	ALIGN	2
YKNewTask:
	; >>>>> Line:	54
	; >>>>> void YKNewTask(void(*task)(void), void *taskStack, unsigned char priority ){ 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	56
	; >>>>> YKTCBArray[TCBArrayNum].priority = priority; 
	mov	al, byte [bp+8]
	xor	ah, ah
	push	ax
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	add	dx, YKTCBArray
	mov	si, dx
	add	si, 4
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	57
	; >>>>> YKTCBArray[TCBArrayNum].SPtr = (void *)((int *)taskStack + 254); 
	mov	ax, word [bp+6]
	add	ax, 508
	push	ax
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	mov	dx, ax
	mov	si, dx
	add	si, YKTCBArray
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	58
	; >>>>> YKTCBArray[TCBArrayNum].state = ready_st; 
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	59
	; >>>>> YKTCBArray[TCBArrayNum].tickDelay = 
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	60
	; >>>>> YKTCBArray[TCBArrayNum].nextInst = task; 
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	62
	; >>>>> adjustPriority(YKReadyList,&YKTCBArray[TCBArrayNum], &YKReadyList); 
	mov	ax, YKReadyList
	push	ax
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	push	ax
	push	word [YKReadyList]
	call	adjustPriority
	add	sp, 6
	; >>>>> Line:	63
	; >>>>> if (readyTask != YKReadyList) { 
	mov	ax, word [YKReadyList]
	cmp	ax, word [readyTask]
	je	L_yakc_16
	; >>>>> Line:	64
	; >>>>> runSched = 1; 
	mov	byte [runSched], 1
L_yakc_16:
	; >>>>> Line:	67
	; >>>>> *(int *)YKTCBArray[TCBArrayNum].SPtr = *(int *)task; 
	mov	si, word [bp+4]
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	mov	di, ax
	add	di, YKTCBArray
	mov	di, word [di]
	mov	ax, word [si]
	mov	word [di], ax
	; >>>>> Line:	68
	; >>>>> *((int *)YKTCBArray[TCBArrayNum].SPtr+2)=0; 
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	mov	si, ax
	add	si, YKTCBArray
	mov	si, word [si]
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	69
	; >>>>> *((int *)YKTCBArray[TCBArrayNum].SPtr+4)=0; 
	mov	ax, word [TCBArrayNum]
	mov	cx, 14
	imul	cx
	mov	si, ax
	add	si, YKTCBArray
	mov	si, word [si]
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	70
	; >>>>> TCBArrayNum++; 
	inc	word [TCBArrayNum]
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	jmp	L_yakc_15
	ALIGN	2
YKRun:
	; >>>>> Line:	74
	; >>>>> void YKRun(){ 
	jmp	L_yakc_18
L_yakc_19:
	; >>>>> Line:	76
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_18:
	push	bp
	mov	bp, sp
	jmp	L_yakc_19
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	78
	; >>>>> void YKDelayTask(unsigned int delay){ 
	jmp	L_yakc_21
L_yakc_22:
	; >>>>> Line:	80
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_21:
	push	bp
	mov	bp, sp
	jmp	L_yakc_22
	ALIGN	2
YKEnterMutex:
	; >>>>> Line:	82
	; >>>>> void YKEnterMutex(){ 
	jmp	L_yakc_24
L_yakc_25:
	; >>>>> Line:	83
	; >>>>> asm("cli"); 
	cli
	mov	sp, bp
	pop	bp
	ret
L_yakc_24:
	push	bp
	mov	bp, sp
	jmp	L_yakc_25
	ALIGN	2
YKExitMutex:
	; >>>>> Line:	86
	; >>>>> void YKExitMutex(){ 
	jmp	L_yakc_27
L_yakc_28:
	; >>>>> Line:	87
	; >>>>> asm("sti"); 
	sti
	mov	sp, bp
	pop	bp
	ret
L_yakc_27:
	push	bp
	mov	bp, sp
	jmp	L_yakc_28
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	90
	; >>>>> printString("Prio 
	jmp	L_yakc_30
L_yakc_31:
	; >>>>> Line:	91
	; >>>>> nestedDepth++; 
	inc	word [nestedDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_30:
	push	bp
	mov	bp, sp
	jmp	L_yakc_31
	ALIGN	2
YKExitISR:
	; >>>>> Line:	94
	; >>>>> void YKExitISR(){ 
	jmp	L_yakc_33
L_yakc_34:
	; >>>>> Line:	95
	; >>>>> nestedDepth--; 
	dec	word [nestedDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_33:
	push	bp
	mov	bp, sp
	jmp	L_yakc_34
	ALIGN	2
YKScheduler:
	; >>>>> Line:	98
	; >>>>> void YKScheduler(){ 
	jmp	L_yakc_36
L_yakc_37:
	; >>>>> Line:	99
	; >>>>> if (runSched) { 
	mov	al, byte [runSched]
	test	al, al
	je	L_yakc_38
	; >>>>> Line:	100
	; >>>>> runSched = 0; 
	mov	byte [runSched], 0
	; >>>>> Line:	101
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_yakc_38:
	mov	sp, bp
	pop	bp
	ret
L_yakc_36:
	push	bp
	mov	bp, sp
	jmp	L_yakc_37
	ALIGN	2
YKDispatcher:
	; >>>>> Line:	105
	; >>>>> void YKDispatcher(){ 
	jmp	L_yakc_40
L_yakc_41:
	; >>>>> Line:	107
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_40:
	push	bp
	mov	bp, sp
	jmp	L_yakc_41
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	109
	; >>>>> void YKTickHandler(){ 
	jmp	L_yakc_43
L_yakc_44:
	; >>>>> Line:	110
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_43:
	push	bp
	mov	bp, sp
	jmp	L_yakc_44
	ALIGN	2
YKCtxSwCount:
	; >>>>> Line:	112
	; >>>>> void YKCtxSwCount(){ 
	jmp	L_yakc_46
L_yakc_47:
	; >>>>> Line:	113
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_46:
	push	bp
	mov	bp, sp
	jmp	L_yakc_47
	ALIGN	2
YKIdleCount:
	; >>>>> Line:	115
	; >>>>> void YKIdleCount(){ 
	jmp	L_yakc_49
L_yakc_50:
	; >>>>> Line:	116
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_49:
	push	bp
	mov	bp, sp
	jmp	L_yakc_50
	ALIGN	2
YKTickNum:
	; >>>>> Line:	118
	; >>>>> void YKTickNum(){ 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	119
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	jmp	L_yakc_53
L_yakc_59:
	DB	" State = ",0
L_yakc_58:
	DB	" TickDelay = ",0
L_yakc_57:
	DB	"Priority = ",0
L_yakc_56:
	DB	"contents of ",0
L_yakc_55:
	DB	"##############",0xA,0
	ALIGN	2
printLinkedList:
	; >>>>> Line:	121
	; >>>>> void printLinkedList(TCBptr head, char* string){ 
	jmp	L_yakc_60
L_yakc_61:
	; >>>>> Line:	124
	; >>>>> printNewLine(); 
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	; >>>>> Line:	124
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	125
	; >>>>> printString("##############\n"); 
	mov	ax, L_yakc_55
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	126
	; >>>>> printString("contents of "); 
	mov	ax, L_yakc_56
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	127
	; >>>>> printString(string); 
	push	word [bp+6]
	call	printString
	add	sp, 2
	; >>>>> Line:	128
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	129
	; >>>>> while (current != 0) { 
	jmp	L_yakc_63
L_yakc_62:
	; >>>>> Line:	130
	; >>>>> printString("Prio 
	mov	ax, L_yakc_57
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printInt(head->priority); 
	mov	si, word [bp+4]
	add	si, 4
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> printString(" TickDelay = "); 
	mov	ax, L_yakc_58
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	133
	; >>>>> printInt(head->tickDelay); 
	mov	si, word [bp+4]
	add	si, 6
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString(" State = "); 
	mov	ax, L_yakc_59
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	135
	; >>>>> printInt(head->state); 
	mov	si, word [bp+4]
	add	si, 8
	push	word [si]
	call	printInt
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	137
	; >>>>> current = current->nextTCB; 
	mov	si, word [bp-2]
	add	si, 12
	mov	ax, word [si]
	mov	word [bp-2], ax
L_yakc_63:
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_yakc_62
L_yakc_64:
	; >>>>> Line:	139
	; >>>>> printString("##############\n"); 
	mov	ax, L_yakc_55
	push	ax
	call	printString
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_yakc_60:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_61
	ALIGN	2
readyTask:
	TIMES	2 db 0
YKReadyList:
	TIMES	2 db 0
YKSuspList:
	TIMES	2 db 0
YKAvailList:
	TIMES	2 db 0
YKTCBArray:
	TIMES	70 db 0
idleTaskStack:
	TIMES	512 db 0
